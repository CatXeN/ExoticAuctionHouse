// <auto-generated />
using System;
using ExoticAuctionHouse_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExoticAuctionHouse_API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231119082316_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthModels.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Attributes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ExoticAuctionHouseModel.Models.Attribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Attributes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d20cccb0-0c09-4d95-8035-2d7b324e9ca8"),
                            Category = "Audio and multimedia",
                            Value = "Apple CarPlay"
                        },
                        new
                        {
                            Id = new Guid("118c3241-9e97-49b3-94aa-3a3d2829b7df"),
                            Category = "Audio and multimedia",
                            Value = "Android Auto"
                        },
                        new
                        {
                            Id = new Guid("7ef7c8a7-00e0-4294-9b7d-db5160ce06ce"),
                            Category = "Audio and multimedia",
                            Value = "Interface Bluetooth"
                        },
                        new
                        {
                            Id = new Guid("e9bca008-430c-42e4-9e85-1fd86cb712fd"),
                            Category = "Audio and multimedia",
                            Value = "Radio"
                        },
                        new
                        {
                            Id = new Guid("9faa7a78-fac6-4dcb-b470-5bc1cdc6d8fa"),
                            Category = "Audio and multimedia",
                            Value = "USB socket"
                        },
                        new
                        {
                            Id = new Guid("17681eeb-b3e1-4595-b180-b2d9cb468ee8"),
                            Category = "Audio and multimedia",
                            Value = "HIFI speaker"
                        },
                        new
                        {
                            Id = new Guid("96ef2bdc-17bf-4c74-85d6-482862376515"),
                            Category = "Audio and multimedia",
                            Value = "Touchscreen"
                        },
                        new
                        {
                            Id = new Guid("38cb367b-d44d-4f14-b0c4-dcfbfc295b9c"),
                            Category = "Comfort and accessories",
                            Value = "Automatic air conditioning"
                        },
                        new
                        {
                            Id = new Guid("9f351cdc-5964-49e7-b120-7b51dc4a8c81"),
                            Category = "Comfort and accessories",
                            Value = "Leather seats"
                        },
                        new
                        {
                            Id = new Guid("6aa5af41-dd8a-4db9-9145-ad9248781dd1"),
                            Category = "Comfort and accessories",
                            Value = "Heated seats"
                        },
                        new
                        {
                            Id = new Guid("3f429e2a-df3f-47ed-bd5e-7db91b904691"),
                            Category = "Comfort and accessories",
                            Value = "Leather steering wheel"
                        },
                        new
                        {
                            Id = new Guid("e7a5707b-6f04-49a0-b1c6-d91fb13f9716"),
                            Category = "Comfort and accessories",
                            Value = "Multifunction steering wheel"
                        },
                        new
                        {
                            Id = new Guid("97152f01-55a6-48e4-a1f8-5a691e2f9a9c"),
                            Category = "Comfort and accessories",
                            Value = "Electrict windows"
                        },
                        new
                        {
                            Id = new Guid("3375157f-b150-4e53-9ce7-c34a9e48e08e"),
                            Category = "Driver assistance system",
                            Value = "Headlights with LED technology"
                        },
                        new
                        {
                            Id = new Guid("78f40800-0f96-44aa-bfb1-824380ca7ce9"),
                            Category = "Driver assistance system",
                            Value = "Park assistant"
                        },
                        new
                        {
                            Id = new Guid("3a99a83f-3cc0-4eeb-bda8-a511bb12f2e2"),
                            Category = "Driver assistance system",
                            Value = "Heated side mirror"
                        },
                        new
                        {
                            Id = new Guid("019fa335-ebf1-4dde-b6f1-7b4056d34c07"),
                            Category = "Driver assistance system",
                            Value = "ESP"
                        },
                        new
                        {
                            Id = new Guid("966429a0-7302-4f99-b3ab-08ad891bac58"),
                            Category = "Driver assistance system",
                            Value = "Daytime running lights"
                        },
                        new
                        {
                            Id = new Guid("1b8fe7ca-0cad-4aed-875e-fbe85d5dab44"),
                            Category = "Driver assistance system",
                            Value = "Fog lamps"
                        },
                        new
                        {
                            Id = new Guid("d512a363-6e95-48b9-ab88-ec629eedcb2c"),
                            Category = "Driver assistance system",
                            Value = "System start/stop"
                        },
                        new
                        {
                            Id = new Guid("845ee16f-bf05-4032-a27a-7ff8ec0315db"),
                            Category = "Driver assistance system",
                            Value = "Power steering"
                        },
                        new
                        {
                            Id = new Guid("5a5e8d7b-5669-455f-978e-c6f8ae4092f6"),
                            Category = "Security",
                            Value = "ABS"
                        },
                        new
                        {
                            Id = new Guid("55107aef-6741-4ddb-8ab8-715fe0beded9"),
                            Category = "Security",
                            Value = "ESP"
                        },
                        new
                        {
                            Id = new Guid("d9f5f533-d571-4f5a-9f20-f9db04a6dec1"),
                            Category = "Security",
                            Value = "Isofix"
                        });
                });

            modelBuilder.Entity("ExoticAuctionHouseModel.Models.Auction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AmountStarting")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("BiddingBegins")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsEnd")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("ExoticAuctionHouseModel.Models.AuctionHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("SoldAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("AuctionHistory");
                });

            modelBuilder.Entity("ExoticAuctionHouseModel.Models.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BodyType")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("FuelType")
                        .HasColumnType("int");

                    b.Property<string>("Generation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Horsepower")
                        .HasColumnType("int");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("ExoticAuctionHouseModel.Models.CarAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("CarId");

                    b.ToTable("CarAttributes");
                });

            modelBuilder.Entity("ExoticAuctionHouseModel.Models.Auction", b =>
                {
                    b.HasOne("ExoticAuctionHouseModel.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("ExoticAuctionHouseModel.Models.AuctionHistory", b =>
                {
                    b.HasOne("ExoticAuctionHouseModel.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("ExoticAuctionHouseModel.Models.CarAttribute", b =>
                {
                    b.HasOne("ExoticAuctionHouseModel.Models.Attribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExoticAuctionHouseModel.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Car");
                });
#pragma warning restore 612, 618
        }
    }
}
